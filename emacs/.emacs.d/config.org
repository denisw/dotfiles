#+TITLE: Emacs Configuration
#+AUTHOR: Denis Washington
#+TOC: true

This is my configuration for Emacs, written as an
[[https://orgmode.org/][Org Mode]] file for better organization.

* Basics
** Package System

Add [[https://melpa.org][MELPA]] to the list of package sources.
I install the majority of packages from there.

#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")))
#+END_SRC

Install [[https://github.com/jwiegley/use-package][use-package]] if needed.
With this I install all other packages.

#+BEGIN_SRC emacs-lisp
  (when (not (package-installed-p 'use-package))
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
#+END_SRC

** UI

Reduce UI clutter.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

Show line numbers and highlight the current line.

#+BEGIN_SRC emacs-lisp
  (global-linum-mode 1)
  (global-hl-line-mode 1)

  (use-package hlinum
    :ensure t
    :config
    (hlinum-activate))
#+END_SRC

Show the current column number in the mode line.

#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
#+END_SRC

Don't show the splash screen on startup, but directly show the
~*scratch*~ buffer.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
#+END_SRC

Allow resizing frames based on pixels (rather than character rows and
columns) so that maximizing is guaranteed to fill the whole screen.

#+BEGIN_SRC emacs-lisp
  (setq frame-resize-pixelwise t)
#+END_SRC

** Font

Use Menlo if available (i.e., on macOS). Otherwise, try falling back
to Source Code Pro.

#+BEGIN_SRC emacs-lisp
  (let ((fonts (font-family-list)))
    (cond
     ((member "Menlo" fonts)
      (set-frame-font "Menlo-13" nil t))
     ((member "Source Code Pro" fonts)
      (set-frame-font "Source Code Pro-13" nil t))))
#+END_SRC

** Indentation & Whitespace

Indent with two spaces by default.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)
#+END_SRC

Delete trailing whitespace on save.

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC

When writing prose, prefer a single space after sentences rather than
the default of two.


#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

** Parentheses

Highlight matching parentheses.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

Use ~electric-pair-mode~ to automatically input matching parentheses.

#+BEGIN_SRC emacs
  (electric-pair-mode)
#+END_SRC

** Misc

Set the default directory to the home directory if it is "/". This is the
case if Emacs is run as a GUI app on macOS.

#+BEGIN_SRC emacs-lisp
  (when (equal default-directory "/")
    (setq default-directory "~"))
#+END_SRC

Disable bell sounds.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

Replace all "Enter yes or no" questions with "Enter y or n".

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Put backup and auto-save files into the system's temp directory.
See http://www.emacswiki.org/emacs/BackupDirectory.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC

* Evil Mode

I am a a big fan of [[https://www.vim.org][Vim]] keybindings.
For this reason, I use [[https://github.com/emacs-evil/evil][Evil Mode]]
wherever possible.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-shift-width tab-width)
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)
    ;; Bind C-u to scroll-up instead of repeat
    (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
    ;; Bind C-p to projectile-find-file
    (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file))
#+END_SRC

Add the Evil Collection to integrate Evil into as many modes as possible.

#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (evil-collection-init))
#+END_SRC

Add ~evil-commentary~, which is modeled after ~vim-commentary~. It adds
several commands prefixed by ~gc~ to comment code (e.g., ~gcc~ to comment
the current line).

#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :ensure t
    :after evil
    :config
    (evil-commentary-mode))
#+END_SRC

Use ~evil-leader~ to make Space a Vim-style leader key.

#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t
    :after evil
    :config
    (global-evil-leader-mode)

    ;; Use space key as leader key (inspired by Spacemacs :))
    (evil-leader/set-leader "<SPC>")

    ;; Shortcuts -- Buffers
    (evil-leader/set-key
      "b" 'switch-to-buffer
      "k" 'kill-this-buffer)

    ;; Shortcuts -- Files
    (evil-leader/set-key "f" 'find-file)

    ;; Shortcuts -- Magit
    (evil-leader/set-key "g" 'magit-status)

    ;; Shortcuts -- Projectile
    (evil-leader/set-key "p" 'projectile-find-file)

    ;; Shortcuts -- M-x
    (evil-leader/set-key "<SPC>" 'execute-extended-command)

    ;; Shortcuts -- Windows
    (evil-leader/set-key "0" 'delete-window)
    (evil-leader/set-key "1" 'delete-other-windows)
    (evil-leader/set-key "2" 'split-window-below)
    (evil-leader/set-key "3" 'split-window-right)
    (evil-leader/set-key "w" 'other-window))
#+END_SRC

* Theme

Install the [[Emacs Doom themes][https://github.com/hlissner/emacs-doom-themes]]
and use its "Doom One" theme.

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t))
#+END_SRC

* Utilities
** Flycheck

Add Flycheck for live syntax checking.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init
    (setq-default flycheck-disabled-checkers
                  '(emacs-lisp-checkdoc javascript-jshint))
    :config
    (global-flycheck-mode 1))
#+END_SRC

** Magit

Add Magit, one of the best Git clients.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

Integrate Magit with Evil keybindings.

#+BEGIN_SRC emacs-lisp
  (use-package evil-magit
    :ensure t
    :after (evil magit))
#+END_SRC

** Ivy

Use Ivy for all things minibuffer completion.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) "))
#+END_SRC

** LSP

Use LSP mode for JavaScript and TypeScript.

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook ((typescript-mode . lsp-deferred))
    :init
    (setq lsp-signature-render-documentation nil)

    ;; Enable LSP in js-mode, but not for JSON files
    (add-hook 'js-mode-hook
              (lambda ()
                (unless (equal major-mode "json-mode")
                  (lsp-deferred)))))
#+END_SRC

** Olivetti

Add Olivetti for distraction-free writing.

#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :ensure t)
#+END_SRC

** Projectile

Add Projectile for managing and navigating in projects, and configure it
to use Ivy for all completion prompts.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
    (setq projectile-completion-system 'ivy)
    :config
    (projectile-mode 1))
#+END_SRC

** Treemacs

Add the Treemacs file explorer and its Evil Mode and Projectile integrations.

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t)

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)
#+END_SRC

* Major Modes
** Dockerfile

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+END_SRC

** JavaScript

Indent JavaScript with two spaces by default.

#+BEGIN_SRC emacs-lisp
  (setq-default js-indent-level 2)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package prettier-js
    :ensure t
    :after (add-node-modules-path)
    :commands prettier-js-mode
    :hook ((js-mode . prettier-js-mode)
           (typescript-mode . prettier-js-mode)))
#+END_SRC

Automatically add ~node_modules/.bin~ to the executable path. This lets
Flymake, ~prettier-js-mode~, etc. use the locally installed versions of
the underlying tools rather than requiring them to be installed globally.

#+BEGIN_SRC emacs-lisp
  (use-package add-node-modules-path
    :ensure t
    :hook (js-mode typescript-mode))
#+END_SRC

** JSON

Use ~json-mode~ for JSON files instead of the built-in ~js-mode~.

#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t
    :mode (("\\.json\\'" . json-mode)
           ("/\\.eslintrc\\'" . json-mode)
           ("/\\.prettierrc\\'" . json-mode)))
#+END_SRC

** Markdown

Add ~markdown-mode~ for Markdown syntax highlighting.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode)
#+END_SRC

** Org Mode

Use ~Documents/Org~ as the default org-mode directory.

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Documents/Org")
  (setq org-agenda-files (list org-directory))
#+END_SRC

Allow following links by pressing Enter.

#+BEGIN_SRC emacs-lisp
  (setq org-return-follows-link t)
#+END_SRC

Don't truncate long lines.

#+BEGIN_SRC emacs-lisp
  (setq org-startup-truncated nil)
#+END_SRC

Install ~deft~ for easily finding Org files.

#+BEGIN_SRC emacs-lisp
  (use-package deft
    :ensure t
    :config
    (setq deft-directory org-directory))
#+END_SRC

Install ~org-roam~ as a personal Zettelkasten archive.
Save org-roam files separately in ~Documents/Zettelkasten~.

#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :config
    (setq org-roam-directory "~/Documents/Zettelkasten")
    (add-hook 'after-init-hook 'org-roam-mode)
    (evil-leader/set-key "o" 'org-roam-find-file))

  (define-key org-mode-map (kbd "C-c i") 'org-roam-insert)

#+END_SRC

** Programming
** Python

Use ~elpy~ for great Python language support.

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))
#+END_SRC

** TypeScript

#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :ensure t
    :config
    (setq-default typescript-indent-level 2))
#+END_SRC

** HTML / CSS

Add ~web-mode~ and use it for HTML, CSS and HTML template files.

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode (("\\.css\\'" . web-mode)
          ("\\.html\\'" . web-mode)
          ("\\.njk\\'" . web-mode))
    :init
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-css-indent-offset 2)
    (setq-default web-mode-code-indent-offset 2))
#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC
* Platform-Specific
** MacOS

Use the ~exec-path-from-shell~ package to work around the fact that MacOS
GUI applications don't inherit environment variables from the login shell.

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (use-package exec-path-from-shell
    :config
    (setq exec-path-from-shell-check-startup-files nil)
    (exec-path-from-shell-initialize)))
#+END_SRC
